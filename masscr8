#!/home/oracle/perl -w

use strict;
no strict qw(refs vars);
use OraEnv;
use email;

# set these according to environment ( home, work )

#WORK
$MailDomain='regence.com';
$DbaMailDomain='bcbso.com';
$IwSupportAddress='or_iwsupp@regence.com';
$DataWarehouse='ds01';

my $MailPasswordToUser=0;

# dba repository
$DBAREP='dbarep';

# HOME
#$MailDomain='localhost';
#$DbaMailDomain='localhost';
# dba repository
#$DBAREP='ts99';

# who's running this?
@PassEntry=getpwuid($<);$WhoAmI=$PassEntry[0];

die "Cannot get your username from getpwuid!\n" unless $WhoAmI;

use Getopt::Long;

my($result) = Getopt::Long::GetOptions(
	"mailpassword",
	"username=s",
	"instance=s",
	"filename=s",	
	"message-text-file=s",	
	"roles=s",	
	"debug",	
	"create-user",
	"gen-passwords",
	"update-common",
	"z","h","help"
);

# GetOpt returns a zero on error or lack of args
if ( ( ! $result ) || ($opt_help or $opt_z or $opt_h ) ) { &Usage;exit }
if ( ! $opt_username or ! $opt_filename or ! $opt_instance ) { &Usage;exit }

# tell -w to shut up
use vars qw{ $opt_z $opt_h $opt_help $opt_mail 
	$opt_debug $opt_roles $opt_mailpassword 
	$opt_username $opt_instance $opt_create_user 
	$opt_gen_passwords $opt_message_text_file 
	$opt_filename $opt_update_common 
};

# set the environment before loading DBI as it needs TNS_ADMIN
OraEnv::SetEnv($opt_instance);

use DBI qw(:sql_types);

# do not mail passwords unless the passwords are generated
$opt_mailpassword = 0 unless $opt_mailpassword;
$opt_gen_passwords = 0 unless $opt_gen_passwords;
$opt_mailpassword = $opt_mailpassword & $opt_gen_passwords;

# flush buffer for every write
$|=1;

my @MailMsg = <DATA>;

# add IW support to message
# will be mailed FYI to or_iwsupp@regenge.com
if ( lc($opt_instance) eq $DataWarehouse ) {

	push(@MailMsg, qq {

The IW support team will add you to an e-mail distribution list,
OR_IWUSERS.  This will help to keep you informed about events involving
the information warehouse.


	});

}

$DEBUG=$opt_debug;

$Password = OraEnv::GetPassWord($opt_instance,$opt_username);

$CommonUserEmailSql = qq{insert into common.user_email\@${DBAREP}(user_name,email_address, first_name, last_name, middle_name, emp_no, acf2_id, added_by, comments) };
$CommonUserEmailSql .= qq{ values(upper(?), lower( ? || '\@$MailDomain'),upper(?), upper(?), upper(?), ?, ?, '$opt_username', 'generated by masscr8' ) };

$CommonUserInstanceSql = qq{insert into common.user_instance\@${DBAREP}(user_name,instance_name, password_changed) };
$CommonUserInstanceSql .= qq{ values(upper(?),'$opt_instance','N') };

$Alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWZYZ';
$PasswordGenSql = qq {select };
$PasswordGenSql .= qq { substr('$Alphabet',MOD(TO_CHAR(SYSDATE,'SS'),25)+1,1)|| };
$PasswordGenSql .= qq { substr('$Alphabet',MOD(substr(mod(hsecs,99999999)+?,5,2),25)+1,1)|| };
$PasswordGenSql .= qq { substr('$Alphabet',MOD(substr(mod(hsecs,99999999)+?,6,2),25)+1,1)|| };
$PasswordGenSql .= qq { substr('$Alphabet',MOD(substr(mod(hsecs,99999999)+?,7,2),25)+1,1)|| };
$PasswordGenSql .= qq { mod(hsecs,9999) as password };
$PasswordGenSql .= qq { from v\$timer };

if ($DEBUG) {
	print "$CommonUserEmailSql\n\n";
	print "$CommonUserInstanceSql\n\n";
	print "$PasswordGenSql\n\n";
}

my @MsgTxt=();
#print "M: $opt_message_text_file\n";

if ( $opt_message_text_file ) {
	open(MSGTXT,"$opt_message_text_file") || die "Cannot open file $opt_message_text_file - $! \n";
	chomp(@MsgTxt=<MSGTXT>);
	close MSGTXT;
}

open(USERS,"$opt_filename") || die "Cannot open file $opt_filename - $!\n";

my $dbh = DBI->connect( 
	'dbi:Oracle:'.$opt_instance, 
	$opt_username, 
	$Password, 
	{ RaiseError => 1, AutoCommit => 0 }
) || die "Database connection not made: $DBI::errstr";

my $sthUserEmail = $dbh->prepare( $CommonUserEmailSql );
my $sthUserInstance = $dbh->prepare( $CommonUserInstanceSql );
my $sthPasswordGen = $dbh->prepare( $PasswordGenSql );

$sthPasswordGen->bind_columns( undef, \$NewPassword );

$seed=0;

while (<USERS>) {

	next if /^#/;

	chomp;
	my $line = $_;

	$seed++;

	($NewUsername, $fname, $lname, $mi, $empno, $acf2_id ) = split(/:/);
	# use empty string for null - works with varchar2
	$middle_name = ( length($mi) == 0 ) ? '' : $mi ;

	print "Processing User: $NewUsername\n";

	$MailPasswordToUser = 0;

	# generate usable password if gen-password set
	if ( $opt_gen_passwords )  {
		eval {
   		$sthPasswordGen->bind_param( 1, $seed, SQL_INTEGER );
   		$sthPasswordGen->bind_param( 2, $seed, SQL_INTEGER );
   		$sthPasswordGen->bind_param( 3, $seed, SQL_INTEGER );
			$sthPasswordGen->execute();
			$sthPasswordGen->fetch();
		};

		if( $@ ) {
			warn "Error generating passwords\n";
			die "Database error: $DBI::errstr\n";
		}
	} else { $NewPassword = qq { values 'unusable' } }

	print "PASSWORD-d: $NewPassword\n" if $DEBUG;

	if ( $opt_create_user ) {

		$CreateSql = qq{create user $NewUsername identified by $NewPassword default tablespace users temporary tablespace temp };

		print "CREATE SQL: $CreateSql\n\n" if $DEBUG;

		$MailPasswordToUser = 1;

		if ( ! $DEBUG ) {
			eval {
				my $rc = $dbh->do($CreateSql);
			};

			# 1920 means user exists
			# just ignore it
			if ( $@ ) {
				$MailPasswordToUser = 0;
				if ( $DBI::err == 1920 ) {
					warn "User $NewUsername already exists\n"
				} else { die "Error Creating User $NewUsername - $DBI::errstr \n" }
			}
		}
	}

	my $Privs;
	($Privs= 'create session' ) .= $opt_roles ? ',' . $opt_roles : '' ;
	my $GrantSql = "grant $Privs to $NewUsername ";
	if ($DEBUG) {
		print "GRANT SQL: $GrantSql\n\n";
	} else {
		my $rc = $dbh->do($GrantSql)|| die "Error Granting Roles to User $NewUsername - $dbh->errstr \n";
	}

	# change users password if password-gen set
	# don't change password if user was just created
	# as the create procedure already set the password.
	# if it failed, we don't want the password reset
	# if opt_gen_passwords was specified, AND opt_create_user
	# was also specified, passwords for existing users will
	# NOT be generated
	# 
	# if opt_gen_passwords was specified, AND opt_create_user
	# was NOT specified, then passwords will be generated 
	# for all users in the users file
	if ( $opt_gen_passwords and ! $opt_create_user ) {
		$AlterSql = qq{alter user $NewUsername identified by $NewPassword };
		$MailPasswordToUser = 1;
		if ( $DEBUG ) {
			print "PASSWORD SQL: $AlterSql\n";
		} else {
			my $rc = $dbh->do($AlterSql) || die "Unable to change $NewUsername password\n";
		}
	}

	#print "MAIL PASSWORD TO USER: $MailPasswordToUser \n";

	if ( $opt_mailpassword and $MailPasswordToUser ) {
		$MailStr = join("",@MailMsg);
		my $MsgTxt = join("\n",@MsgTxt );

		$MailAddress = lc($NewUsername) . "\@$MailDomain";
 
		$MailStr =~ s/<PASSWORD>/$NewPassword/g;
		$MailStr =~ s/<LASTNAME>/$lname/g;
		$MailStr =~ s/<FIRSTNAME>/$fname/g;
		$MailStr =~ s/<MI>/$mi/g;
		$MailStr =~ s/<SID>/$opt_instance/g;
		$MailStr =~ s/<USERID>/$NewUsername/g;
		$MailStr =~ s/<MAIL_MESSAGE>/$MsgTxt/g;

		if ( $DEBUG ) {
			print "Mail Address: $MailAddress\n";
			print $MailStr;
			print "\n---------------------------------------\n";
		} else { 
			# mail to user
			email::SendMail([$MailAddress], $MailStr, "New Oracle Account for $NewUsername on $opt_instance");

			# mail to creator, but don't send password
			my $MailStr = join("",@MailMsg);
			$MailStr =~ s/<LASTNAME>/$lname/g;
			$MailStr =~ s/<FIRSTNAME>/$fname/g;
			$MailStr =~ s/<MI>/$mi/g;
			$MailStr =~ s/<SID>/$opt_instance/g;
			$MailStr =~ s/<USERID>/$NewUsername/g;
			$MailStr =~ s/<MAIL_MESSAGE>/$MsgTxt/g;

			# uncomment to see password in mail to creator
			#$MailStr =~ s/<PASSWORD>/$NewPassword/g;

			my @MailAddress;
			# DBA address
			push(@MailAddress, lc($WhoAmI) . "\@$DbaMailDomain");
			push(@MailAddress, $IwSupportAddress) if lc($opt_instance) eq $DataWarehouse;

			email::SendMail(\@MailAddress, $MailStr, "FYI - New Oracle Account for $NewUsername on $opt_instance");

		}
	}

	if ( $opt_update_common  ) {
		if ( ! $DEBUG ) {

			eval {
				$sthUserEmail->bind_param( 1,$NewUsername , SQL_VARCHAR );
				$sthUserEmail->bind_param( 2,$NewUsername , SQL_VARCHAR );
				$sthUserEmail->bind_param( 3,$fname , SQL_VARCHAR );
				$sthUserEmail->bind_param( 4,$lname , SQL_VARCHAR );
				$sthUserEmail->bind_param( 5,$middle_name , SQL_VARCHAR );
				$sthUserEmail->bind_param( 6,$empno , SQL_INTEGER );
				$sthUserEmail->bind_param( 7,$acf2_id , SQL_VARCHAR );
				$sthUserEmail->execute();
			};

			$SaveDbErr = $DBI::err;
			$SaveDbErrstr = $DBI::errstr;

			if ($@) {
				if ( $SaveDbErr == 1 ) {
					warn "$NewUsername already in common.user_email table\n";
					#warn "ERROR NUMBER: $SaveDbErr\n";
					#warn "ERROR STRING: $SaveDbErrstr\n";
				} else {
					#print "LINE: $line\n";
					#print "EMP ID: $empno\n";
					$dbh->rollback();
					die "Database error inserting common.user_email : $SaveDbErrstr\n";
				}
			}

			eval {
				$sthUserInstance->bind_param( 1,$NewUsername , SQL_VARCHAR );
				$sthUserInstance->execute();
			};

			if ($@) {
				if ( $SaveDbErr == 1 ) {
					warn "$NewUsername/$opt_instance already in common.user_instance table\n";
				} else {
					$dbh->rollback();
					die "Database error inserting common.instance : $SaveDbErrstr\n";
				}
			}

		} else {
			print "NEW USER-d: $NewUsername\n";
			print "EMP ID-d  : $empno\n\n";
		}

	}

	print "\n" if $DEBUG;

	$dbh->commit();

}

$dbh->commit();
$sthUserEmail->finish();
$sthUserInstance->finish();
$sthPasswordGen->finish();

$dbh->disconnect();


sub Usage {
print <<EOF

masscr8 - create multiple BCBSO Oracle accounts
usage :
   -mailpassword      : mail the password to the users
   -username          : dba username ( must be in password files )
   -instance          : create in which instance?
   -filename          : filename containing users
   -roles             : comma separated list of roles to grant to all
   -create-user       : create the users and passwords

   -gen-passwords     : generate passwords for users in file
                        if user exists, and <-create-user> WAS specified, 
                        passwords will NOT be created for existing users.
                        The password will be set to an unusable value.
                         
                        if <-create-user> was NOT specified, new passwords
                        WILL be generated and mailed to the users.

   -update-common     : update COMMON tables at BCBSO
   -debug             : debug mode - just prints output
   -message-text-file : file containing text to be inserted into mail to users
   -help              : show this message

EOF
}


__DATA__

An account for your use has been established on <SID>.  

Your userid has been set up as follows:

NAME: <LASTNAME>, <FIRSTNAME>, <MI>
INSTANCE: <SID>
USERID: <USERID>
PASSWORD: <PASSWORD>

<MAIL_MESSAGE>

Corporate Security requires you to change your password as soon as you
begin to use the system.  To do this in Oracle, you need to 
execute the following SQL command:

ALTER USER <USERID> IDENTIFIED BY 'newpassword';

Or you can visit the internal Oracle web page at www1.bcbso.com/~oracle
to change this via a web-enabled form.

In order to use "global links", all passwords must be the same on every
instance to which you have access.

In addition, you will be added to the email distribution list OR_ORACLE.
This email id will help to keep you informed of happenings in Oracle.

The Oracle User Group meets once a month.  To be added to its
distribution list, please send an email to Ted Moore (tpmoore) asking
to be added to 'OR_ORAQC'
